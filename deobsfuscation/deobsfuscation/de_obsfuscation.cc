#include "de_obsfuscation.h"
#include <memory>

DeObsfuscation* DeObsfuscation::Get(){
	static DeObsfuscation* r_interface = nullptr;
	if(r_interface==nullptr){
		static std::tr1::shared_ptr<DeObsfuscation> share;
		r_interface = reinterpret_cast<DeObsfuscation*>(&share);
	}
	return r_interface;
}

bool DeObsfuscation::Decode(char* src,char* dst){
	while(*src){
		if(IsBracketNewLineA(src)){
			*dst++ = *src++;
			*dst++ = '\r';
			*dst++ = '\n';
			src += 2;
		}
		else if(IsBracketNewLineB(src)){
			*dst++ = *src++;
			*dst++ = '\r';
			*dst++ = '\n';
			src += 2;
		}
		else if(IsSemicolonNewLine(src)){
			*dst++ = *src++;
			*dst++ = '\r';
			*dst++ = '\n';
			src += 2;
		}
		else if(IsBigBracketNewLineA(src)){
			*dst++ = *src++;
			*dst++ = '\r';
			*dst++ = '\n';
			src += 2;
		}
		else if(IsBigBracketNewLineB(src)){
			*dst++ = *src++;
			*dst++ = '\r';
			*dst++ = '\n';
			src += 2;
		}
		else if(IsBracketInsteadTiltedLineA(src)){
			++src;
			if(IsBracketNewLineA(src)){
				*dst++ = *src++;
				*dst++ = '\r';
				*dst++ = '\n';
				src += 2;
			}
			else{
				*dst++ = *src++;
			}
		}
		else if(IsBracketInsteadTiltedLineB(src)){
			++src;
			if(IsBracketNewLineB(src)){
				*dst++ = *src++;
				*dst++ = '\r';
				*dst++ = '\n';
				src += 2;
			}
			else{
				*dst++ = *src++;
			}
		}
		else if(IsSemicolonLine(src)){
			*dst++ = *src++;
			*dst++ = '\r';
			*dst++ = '\n';
		}
		else if(IsElseNewLine(src)){
			*dst++ = *src++;
			*dst++ = *src++;
			*dst++ = *src++;
			*dst++ = *src++;
			*dst++ = '\r';
			*dst++ = '\n';
			src += 2;
		}
		else{
			*dst++ = *src++;
		}
	}
	return true;
}

bool DeObsfuscation::IsBracketNewLineA(char* src){
	if(src[0]=='('&&src[1]=='\\'&&src[2]=='n'){
		return true;
	}
	else{
		return false;
	}
}

bool DeObsfuscation::IsBracketNewLineB(char* src){
	if(src[0]==')'&&src[1]=='\\'&&src[2]=='n'){
		return true;
	}
	else{
		return false;
	}
}

bool DeObsfuscation::IsSemicolonNewLine(char* src){
	if(src[0]==';'&&src[1]=='\\'&&src[2]=='n'){
		return true;
	}
	else{
		return false;
	}
}

bool DeObsfuscation::IsBigBracketNewLineA(char* src){
	if(src[0]=='}'&&src[1]=='\\'&&src[2]=='n'){
		return true;
	}
	else{
		return false;
	}
}

bool DeObsfuscation::IsBigBracketNewLineB(char* src){
	if(src[0]=='{'&&src[1]=='\\'&&src[2]=='n'){
		return true;
	}
	else{
		return false;
	}
}

bool DeObsfuscation::IsBracketInsteadTiltedLineA(char* src){
	if(src[0]=='\\'&&src[1]=='('){
		return true;
	}
	else{
		return false;
	}
}

bool DeObsfuscation::IsBracketInsteadTiltedLineB(char* src){
	if(src[0]=='\\'&&src[1]==')'){
		return true;
	}
	else{
		return false;
	}
}

bool DeObsfuscation::IsSemicolonLine(char* src){
	if(src[0]==';'&&src[1]!='\r'){
		return true;
	}
	else{
		return false;
	}
}

bool DeObsfuscation::IsElseNewLine(char* src){
	if(src[0]=='e'&&src[1]=='l'&&src[2]=='s'&&src[3]=='e'&&src[4]=='\\'&&src[5]=='n'){
		return true;
	}
	else{
		return false;
	}
}

