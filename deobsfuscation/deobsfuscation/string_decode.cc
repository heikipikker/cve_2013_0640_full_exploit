#include "string_decode.h"
#include <memory>

StringDecode* StringDecode::Get(){
	static StringDecode* r_interface = nullptr;
	if(r_interface==nullptr){
		static std::tr1::shared_ptr<StringDecode> share;
		r_interface = reinterpret_cast<StringDecode*>(&share);
	}
	return r_interface;
}

bool StringDecode::ReplaceString(const char* func_name,char* src,char* dst){
	size_t func_name_len = strlen(func_name);
	while(*src){
		if(strncmp(src,func_name,func_name_len)==0){
			if(*(src + func_name_len)=='('){
				++src += func_name_len;
				if(*src!='\''){
					--src -= func_name_len;
					*dst++ = *src++;
					continue;
				}
				++src;
				string argv[3];
				while(*src!='\''){
					argv[0].append(1,*src++);
				}
				src += 2;
				while(*src!=','){
					argv[1].append(1,*src++);
				}
				++src;
				while(*src!=')'){
					argv[2].append(1,*src++);
				}
				++src;
				string result = Decode(argv[0],atoi(argv[1].c_str()),atoi(argv[2].c_str()));
				*dst++ = '"';
				strcpy(dst,result.c_str());
				dst += result.length();
				*dst++ = '"';
			}
			else{
				*dst++ = *src++;
			}
		}
		else{
			*dst++ = *src++;
		}
	}
	return true;
}

string StringDecode::Decode(string c,unsigned long d,unsigned long e){
	unsigned long idx = d % c.length();
	string s = "";
	while (s.length() < c.length()){
		s += c[idx];
		idx = (idx + e) % c.length();
	}
	return s;
}